2 %% 2 == 0
3 %% 2 == 0
4 %% 2 == 0
for (i in 1:100) {}
for (r in 1:100) {
for (c in 1:100) {
randData[r,c] = runig(1, min = 0, max = 100)
}
}
for (r in 1:100) {
for (c in 1:100) {
randData[r,c] = runif(1, min = 0, max = 100)
}
}
randData <- matrix(nrow = 100, ncol = 100)
View(randData)
for (r in 1:100) {
for (c in 1:100) {
randData[r,c] = runif(1, min = 0, max = 100)
}
}
normData <- matrix(nrow = 100, ncol = 100)
View(normData)
View(randData)
randData = round(randData, digits = 0)
View(randData)
for (hh in 1:(nrow(randData))) {
for(ii in 1:(ncol(randData))) {
if (hh %% 2 == 0) {   # Check hh is even
normData[hh, i] = randData[hh,ii] / (randData[hh,ii] + randData[hh-1,i])
} else {
normData[hh, i] = randData[hh,ii] / (randData[hh,ii] + randData[hh+1,i])
}
} # end ii loop
}   # end hh loop
View(normData)
normData <- matrix(nrow = 100, ncol = 100)
for (hh in 1:(nrow(randData))) {
for(ii in 1:(ncol(randData))) {
if (hh %% 2 == 0) {   # Check hh is even
normData[hh,ii] = randData[hh,ii] / (randData[hh,ii] + randData[hh-1,i])
} else {
normData[hh,ii] = randData[hh,ii] / (randData[hh,ii] + randData[hh+1,i])
}
} # end ii loop
}   # end hh loop
View(normData)
normData <- matrix(nrow = 100, ncol = 100)
for (hh in 1:(nrow(randData))) {
for(ii in 1:(ncol(randData))) {
if (hh %% 2 == 0) {   # Check hh is even
normData[hh,ii] = randData[hh,ii] / (randData[hh,ii] + randData[hh-1,ii])
} else {
normData[hh,ii] = randData[hh,ii] / (randData[hh,ii] + randData[hh+1,ii])
}
} # end ii loop
}   # end hh loop
randData <- matrix(nrow = 100, ncol = 100)
normData <- matrix(nrow = 100, ncol = 100)
for (r in 1:100) {
for (c in 1:100) {
randData[r,c] = runif(1, min = 0, max = 100)
}
}
randData = round(randData, digits =)
hh = 1
ii = 1
(hh %% 2 == 0)
normData[hh,ii] = randData[hh,ii] / (randData[hh,ii] + randData[hh+1,ii])
ii=2
(hh %% 2 == 0)
normData[hh,ii] = randData[hh,ii] / (randData[hh,ii] + randData[hh+1,ii])
for (hh in 1:(nrow(randData))) {
for(ii in 1:(ncol(randData))) {
if (hh %% 2 == 0) {   # Check hh is even
normData[hh,ii] = randData[hh,ii] / (randData[hh,ii] + randData[hh-1,ii])
} else {
normData[hh,ii] = randData[hh,ii] / (randData[hh,ii] + randData[hh+1,ii])
}
} # end ii loop
}   # end hh loop
i
i
i
i
install.packages("rticles")
remotes::install_github("SteveLane/superNetballR")
install.packages("remotes")
remotes::install_github("SteveLane/superNetballR")
install.packages("dplyr")
remotes::install_github("SteveLane/superNetballR")
round1_game1 <- downloadMatch("11108",1,1)
library(dplyr)
library(superNetbalR)
library(superNetballR)
library(jsonlite)
round1_game1 <- downloadMatch("11108",1,1)
write_json(round1_game1,"testMatch.json")
#Load appropriate packages
library(dplyr)
library(superNetballR)
library(jsonlite)
r4_g1 <- downloadMatch("11108",4,1)
r4_g2 <- downloadMatch("11108",4,2)
r4_g3 <- downloadMatch("11108",4,3)
r4_g4 <- downloadMatch("11108",4,4)
setwd("E:\\+GitRepos+\\super-netball-analysis\\Data\\SuperNetball2020")
write_json(r4_g1,"r4_g1_SSN2020.json")
write_json(r4_g2,"r4_g2_SSN2020.json")
write_json(r4_g3,"r4_g3_SSN2020.json")
write_json(r4_g4,"r4_g4_SSN2020.json")
