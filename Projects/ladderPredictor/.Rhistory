ladderTeam <- c("Swifts", "Lightning", "GIANTS", "Fever", "Firebirds", "Magpies", "Thunderbirds", "Vixens")
ladderPlayed <- c(10, 10, 10, 9, 10, 10, 10, 9)
ladderWins <- c(7, 7, 6, 7, 4, 3, 3, 2)
ladderDraws <- c(0, 0, 0, 0, 0, 0, 0, 0)
ladderLosses <- c(3, 3, 4, 2, 6, 7, 7, 7)
ladderGoalsFor <- c(603, 588, 602, 616, 631, 581, 547, 467)
ladderGoalsAgainst <- c(557, 582, 560, 542, 621, 632, 598, 543)
ladderPts <- c(28, 28, 24, 16, 16, 12, 12, 8)
ladderPer <- ladderGoalsFor / ladderGoalsAgainst
ladderPer
ladderPer <- ladderGoalsFor / ladderGoalsAgainst * 100
ladderPer
ladderPer <- round(ladderGoalsFor / ladderGoalsAgainst * 100, 2)
ladderPer
ladderData <- data.frame(ladderTeam, ladderPlayed, ladderWins, ladderDraws, ladderLosses,
ladderGoalsFor, ladderGoalsAgainst, ladderPts, ladderPer)
View(ladderData)
Team <- c("Swifts", "Lightning", "GIANTS", "Fever", "Firebirds", "Magpies", "Thunderbirds", "Vixens")
P <- c(10, 10, 10, 9, 10, 10, 10, 9)
W <- c(7, 7, 6, 7, 4, 3, 3, 2)
D <- c(0, 0, 0, 0, 0, 0, 0, 0)
L <- c(3, 3, 4, 2, 6, 7, 7, 7)
GF <- c(603, 588, 602, 616, 631, 581, 547, 467)
GA <- c(557, 582, 560, 542, 621, 632, 598, 543)
Pts <- c(28, 28, 24, 16, 16, 12, 12, 8)
Per <- round(ladderGoalsFor / ladderGoalsAgainst * 100, 2)
ladderData <- data.frame(Team, P, W, D, L, GF, GA, Pts, Per)
View(ladderData)
?sliderInput
?sliderInput()
#Load packages
library(shiny)
?sliderInput
library(shinyWidgets)
install.packages("shinyWidgets")
library(shinyWidgets)
runApp()
runApp()
runApp()
runApp()
install.packages("shinyThemes")
install.packages("shinythemes")
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
View(ladderData)
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
tabPanel("G1",
radioButtons("R8_G1", "Fever vs. Vixens", c("Predict", "Exclude"), selected = "Exclude"),
#Slider input for two teams
sliderInput("FeverR8", "Fever Score", value = 0, min = 0, max = 100),
sliderInput("VixensR8", "Vixens Score", value = 0, min = 0, max = 100)
)
#Load packages
library(shiny)
library(shinyWidgets)
library(shinythemes)
library(reactable)
tabPanel("G1",
radioButtons("R8_G1", "Fever vs. Vixens", c("Predict", "Exclude"), selected = "Exclude"),
#Slider input for two teams
sliderInput("FeverR8", "Fever Score", value = 0, min = 0, max = 100),
sliderInput("VixensR8", "Vixens Score", value = 0, min = 0, max = 100)
)
samplePanel <- tabPanel("G1",
radioButtons("R8_G1", "Fever vs. Vixens", c("Predict", "Exclude"), selected = "Exclude"),
#Slider input for two teams
sliderInput("FeverR8", "Fever Score", value = 0, min = 0, max = 100),
sliderInput("VixensR8", "Vixens Score", value = 0, min = 0, max = 100)
)
View(samplePanel)
#Set list for generic game labels
gameLabels <- c("G1", "G2", "G3", "G4")
#Set list for remaining rounds
roundLabels <- c("R8", "R11", "R12", "R13", "R14")
matchUpLabels <- c(
#Round 8
c(c("Fever", "Vixens"))
)
matchUpLabels <- list(
#Round 8
c(c("Fever", "Vixens"))
)
View(matchUpLabels)
matchUpLabels <- list(
#Round 8
c("Fever", "Vixens")
)
View(matchUpLabels)
matchUpLabels <- list(
#Round 8
list(c("Fever", "Vixens"))
)
View(matchUpLabels)
matchUpLabels <- list(
#Round 8
list(c("Fever", "Vixens")),
#Round 11
list(c("Lightning", "Giants"), c("Fever", "Firebirds"), c("Vixens", "Magpies"), c("Swifts", "Thunderbirds"))
)
View(matchUpLabels)
View(samplePanel)
runApp()
names(matchUpLabels) <- roundLabels
names(matchUpLabels)
View(matchUpLabels)
matchUpLabels <- list(
#Round 8
list(c("Fever", "Vixens")),
#Round 11
list(c("Lightning", "Giants"), c("Fever", "Firebirds"), c("Vixens", "Magpies"), c("Swifts", "Thunderbirds")),
#Round 12
list(c("Lightning", "Thunderbirds"), c("Fever", "Magpies"), c("Vixens", "Firebirds"), c("Swifts", "Giants")),
#Round 13
list(c("Giants", "Fever"), c("Firebirds", "Lightning"), c("Magpies", "Swifts"), c("Thunderbirds", "Vixens")),
#Round 14
list(c("Firebirds", "Magpies"), c("Fever", "Thunderbirds"), c("Swifts", "Lightning"), c("Giants", "Vixens"))
)
names(matchUpLabels) <- roundLabels
View(matchUpLabels)
1:length(roundLabes)
1:length(roundLabels)
matchTabsetList <- list()
rr=1
matchUpLabels[rr]
length(matchUpLabels[rr])
1:length(matchUpLabels[rr])
gg=1
gameLabels[gg]
matchUpLabels[rr]
matchUpLabels[rr][1]
matchUpLabels[rr][1][1]
matchUpLabels[roundLabels[rr]]
1:length(matchUpLabels[roundLabels[rr]])
matchUpLabels[roundLabels[rr]][[1]]
matchUpLabels[roundLabels[rr]][[1]][1]
matchUpLabels[roundLabels[rr]][[1]]))
matchUpLabels[roundLabels[rr]][[1]]
View(matchUpLabels)
paste(matchUpLabels[roundLabels[rr]])
View(matchUpLabels)
matchUpLabels[roundLabels[rr]][[1]]
matchUpLabels$roundLabels[rr]
roundLabels[rr]
matchUpLabels$roundLabels[rr][1]
View(matchTabsetList)
View(matchUpLabels)
matchUpLabels$R8
matchUpLabels$R8[1]
matchUpLabels$R8[[[1]]
matchUpLabels$R8[[1]]
matchUpLabels$R8[[1]][1]
matchUpLabels$R8[[1]][2]
matchUpLabels$roundLabels[rr][[gg]][1]
matchUpLabels[roundLabels[rr]]
roundLabels[rr]
roundLabels[rr][1]
matchUpLabels[rr]
matchUpLabels[rr][[gg]]
matchUpLabels[rr][[gg]][[1]]
matchUpLabels[2][[gg]]
matchUpLabels[2]
matchUpLabels[2][[2]]
matchUpLabels[2][[1]]
matchUpLabels[2][[1]][[1]]
matchUpLabels[rr][[1]][[gg]]
paste(matchUpLabels[rr][[1]][[gg]][1],matchUpLabels[rr][[1]][[gg]][2], sep = ' vs. ')
rr=2
gg=3
paste(matchUpLabels[rr][[1]][[gg]][1],matchUpLabels[rr][[1]][[gg]][2], sep = ' vs. ')
rr=1
gg=1
paste(roundLabels[rr],gameLabels[gg], sep = "_")
paste(matchUpLabels[rr][[1]][[gg]][1], roundLabels[rr], sep = "")
append(matchTabSetList, list())
matchTabsetList <- list()
append(matchTabSetList, list())
append(matchTabsetList, list())
matchTabsetList[[length(matchTabsetList)+1]] <- list()
View(matchTabsetList)
names(matchTabsetList)[length(matchTabsetList)] <- roundLabels[rr]
View(matchTabsetList)
View(samplePanel)
matchTabsetList[rr]
View(matchTabsetList)
length(matchTabsetList[rr])
View(matchTabsetList)
length(matchTabsetList[rr])
length(matchTabsetList)
matchTabsetList$roundLabels[rr]
matchTabsetList[rr]
length(matchTabsetList[rr])+1
matchTabsetList[rr][[1]]
length(matchTabsetList[rr][[1]])
#Create the tab panel for current game and append to round list
matchTabsetList[rr][[1]][[length(matchTabsetList[rr][[1]])+1]] <- tabPanel(gameLabels[gg],
#Header for game
h5(paste(matchUpLabels[rr][[1]][[gg]][1],matchUpLabels[rr][[1]][[gg]][2], sep = ' vs. ')),
#Radio button for including game
radioButtons(paste(roundLabels[rr],gameLabels[gg], sep = "_"),
"Include?", c("Yes", "No"), selected = "No"),
#Slider input for the two teams
#Team 1
sliderInput(paste(matchUpLabels[rr][[1]][[gg]][1], roundLabels[rr], sep = ""),
paste(matchUpLabels[rr][[1]][[gg]][1], "Score", sep = " "),
value = 0, min = 0, max = 100),
#Team 2
sliderInput(paste(matchUpLabels[rr][[1]][[gg]][2], roundLabels[rr], sep = ""),
paste(matchUpLabels[rr][[1]][[gg]][2], "Score", sep = " "),
value = 0, min = 0, max = 100)
)
View(matchTabsetList)
#Create empty list to store tabs in
matchTabsetList <- list()
for (rr in 1:length(roundLabels)) {
#Append a list within the broader matchup list for the current round
#Also rename it to current round
matchTabsetList[[length(matchTabsetList)+1]] <- list()
names(matchTabsetList)[length(matchTabsetList)] <- roundLabels[rr]
#Loop through the games within a round
for (gg in 1:length(matchUpLabels[roundLabels[rr]])) {
#Create the tab panel for current game and append to round list
matchTabsetList[rr][[1]][[length(matchTabsetList[rr][[1]])+1]] <- tabPanel(gameLabels[gg],
#Header for game
h5(paste(matchUpLabels[rr][[1]][[gg]][1],matchUpLabels[rr][[1]][[gg]][2], sep = ' vs. ')),
#Radio button for including game
radioButtons(paste(roundLabels[rr],gameLabels[gg], sep = "_"),
"Include?", c("Yes", "No"), selected = "No"),
#Slider input for the two teams
#Team 1
sliderInput(paste(matchUpLabels[rr][[1]][[gg]][1], roundLabels[rr], sep = ""),
paste(matchUpLabels[rr][[1]][[gg]][1], "Score", sep = " "),
value = 0, min = 0, max = 100),
#Team 2
sliderInput(paste(matchUpLabels[rr][[1]][[gg]][2], roundLabels[rr], sep = ""),
paste(matchUpLabels[rr][[1]][[gg]][2], "Score", sep = " "),
value = 0, min = 0, max = 100)
)
}
}
View(matchTabsetList)
rr
length(matchUpLabels[roundLabels[rr]]))
length(matchUpLabels[roundLabels[rr]])
matchUpLabels[roundLabels[rr]]
matchUpLabels[roundLabels[rr][[1]]]
matchUpLabels[roundLabels[rr][[1]]])
length(matchUpLabels[roundLabels[rr][[1]]])
length(matchUpLabels[rr][[1]])
#Create empty list to store tabs in
matchTabsetList <- list()
for (rr in 1:length(roundLabels)) {
#Append a list within the broader matchup list for the current round
#Also rename it to current round
matchTabsetList[[length(matchTabsetList)+1]] <- list()
names(matchTabsetList)[length(matchTabsetList)] <- roundLabels[rr]
#Loop through the games within a round
for (gg in 1:length(matchUpLabels[rr][[1]])) {
#Create the tab panel for current game and append to round list
matchTabsetList[rr][[1]][[length(matchTabsetList[rr][[1]])+1]] <- tabPanel(gameLabels[gg],
#Header for game
h5(paste(matchUpLabels[rr][[1]][[gg]][1],matchUpLabels[rr][[1]][[gg]][2], sep = ' vs. ')),
#Radio button for including game
radioButtons(paste(roundLabels[rr],gameLabels[gg], sep = "_"),
"Include?", c("Yes", "No"), selected = "No"),
#Slider input for the two teams
#Team 1
sliderInput(paste(matchUpLabels[rr][[1]][[gg]][1], roundLabels[rr], sep = ""),
paste(matchUpLabels[rr][[1]][[gg]][1], "Score", sep = " "),
value = 0, min = 0, max = 100),
#Team 2
sliderInput(paste(matchUpLabels[rr][[1]][[gg]][2], roundLabels[rr], sep = ""),
paste(matchUpLabels[rr][[1]][[gg]][2], "Score", sep = " "),
value = 0, min = 0, max = 100)
)
}
}
View(matchUpLabels)
matchUpLabels$R8
matchTabsetList$R8
matchTabsetList$R9
matchTabsetList$R11
matchTabsetList$R8[[1]]
runApp()
#Create empty list to store tabs in
matchTabsetList <- list()
for (rr in 1:length(roundLabels)) {
#Append a list within the broader matchup list for the current round
#Also rename it to current round
matchTabsetList[[length(matchTabsetList)+1]] <- list()
names(matchTabsetList)[length(matchTabsetList)] <- roundLabels[rr]
#Loop through the games within a round
for (gg in 1:length(matchUpLabels[rr][[1]])) {
#Create the tab panel for current game and append to round list
matchTabsetList[rr][[1]][[length(matchTabsetList[rr][[1]])+1]] <- tabPanel(gameLabels[gg],
#Header for game
h4(paste(matchUpLabels[rr][[1]][[gg]][1],matchUpLabels[rr][[1]][[gg]][2], sep = ' vs. ')),
#Radio button for including game
radioButtons(paste(roundLabels[rr],gameLabels[gg], sep = "_"),
"Include?", c("Yes", "No"), selected = "No"),
#Slider input for the two teams
#Team 1
sliderInput(paste(matchUpLabels[rr][[1]][[gg]][1], roundLabels[rr], sep = ""),
paste(matchUpLabels[rr][[1]][[gg]][1], "Score", sep = " "),
value = 0, min = 0, max = 100),
#Team 2
sliderInput(paste(matchUpLabels[rr][[1]][[gg]][2], roundLabels[rr], sep = ""),
paste(matchUpLabels[rr][[1]][[gg]][2], "Score", sep = " "),
value = 0, min = 0, max = 100)
)
}
}
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
ladderPredict <- data.frame(Team, P, W, D, L, GF, GA, Pts, Per)
View(ladderPredict)
runApp()
runApp()
runApp()
runApp()
ladderPredict <- data.frame(Team, P, W, D, L, GF, GA, Pts, Per)
ladderPredict$P + 4
ladderPredict$P <- ladderPredict$P + 4
View(ladderPredict)
runApp()
View(matchTabsetList)
rr=1
gg=1
paste(roundLabels[rr],gameLabels[gg], sep = "_"
paste(roundLabels[rr],gameLabels[gg], sep = "_")
runApp()
runApp()
paste(roundLabels[rr],gameLabels[gg], sep = "_")
paste(roundLabels[rr],gameLabels[gg], sep = "_")[1]
runApp()
currRadio <- paste(roundLabels[rr],gameLabels[gg], sep = "_")
currRadio
[currRadio]
input$currRadio
input$R8_G1 <- "Yes"
runApp()
paste(roundLabels[rr],gameLabels[gg], sep = "_")
runApp()
runApp()
ladderPredict$Team
team1 <- "Fever"
team2 <- "Vixens"
which(ladderPredict$Team == team1)
ladderPredict$GF
#Get the two team names
team1 <- matchUpLabels[rr][[1]][[gg]][1]
team2 <- matchUpLabels[rr][[1]][[gg]][2]
#Get row indexes for two teams
teamInd1 <- which(ladderPredict$Team == team1)
teamInd2 <- which(ladderPredict$Team == team2)
ladderPredict$GF[teamInd1]
runApp()
View(ladderData)
runApp()
View(ladderData)
ladderPredict$Per <- ladderPredict$GF / ladderPredict$GA
View(ladderPredict)
ladderPredict$Per <- round(ladderPredict$GF / ladderPredict$GA * 100, 2)
View(ladderPredict)
ladderPredict[with(ladderPredict, order(P, Per))]
ladderPredict[with(ladderPredict, order(GF, Per)), ]
ladderPredict[with(ladderPredict, order(P, Per)), ]
ladderPredict[with(ladderPredict, order(Pts, Per)), ]
ladderPredict[with(ladderPredict, order(-Pts, -Per)), ]
runApp()
runApp()
runApp()
View(ladderData)
runApp()
runApp()
install.packages('rsconnect')
rsconnect::setAccountInfo(name='aaron-s-fox', token='78D6D1F0279283F94EE8CAA1FD895E02', secret='889hXRNPd3CZkjoPAlBPgzHsPX+eSJqb3Rh4eIz+')
library(rsconnect)
runApp()
deployApp()
runApp()
getwd
getwd()
runApp()
runApp()
runApp()
runApp()
rm(list = ls())
shiny::runApp()
runApp()
runApp()
runApp()
runApp()
