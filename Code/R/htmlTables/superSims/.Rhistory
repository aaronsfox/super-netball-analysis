ubScore_0_20 = scoreHigher_column(name = "0%-20% Super Shots", class = "border-left"),
ubScore_20_40 = scoreHigher_column(name = "20%-40% Super Shots"),
ubScore_40_60 = scoreHigher_column(name = "40%-60% Super Shots"),
ubScore_60_80 = scoreHigher_column(name = "60%-80% Super Shots"),
ubScore_80_100 = scoreHigher_column(name = "80%-100% Super Shots"),
lbScore_0_20 = scoreHigher_column(name = "0%-20% Super Shots", class = "border-left"),
lbScore_20_40 = scoreHigher_column(name = "20%-40% Super Shots"),
lbScore_40_60 = scoreHigher_column(name = "40%-60% Super Shots"),
lbScore_60_80 = scoreHigher_column(name = "60%-80% Super Shots"),
lbScore_80_100 = scoreHigher_column(name = "80%-100% Super Shots")
),
# Emphasize borders between groups when sorting by group
rowClass = JS("
function(rowInfo, state) {
const firstSorted = state.sorted[0]
if (firstSorted && firstSorted.id === 'group') {
const nextRow = state.pageRows[rowInfo.viewIndex + 1]
if (nextRow && rowInfo.row.group !== nextRow.group) {
return 'group-last'
}
}
}"
),
showSortIcon = FALSE,
borderless = TRUE,
class = "score-table"
)
higherBetter_color
#Set function to create scaled colour palette
make_color_pal <- function(colors, bias = 1) {
get_color <- colorRamp(colors, bias = bias)
function(x) rgb(get_color(x), maxColorValue = 255)
}
#Set colour palette from green-red or red-green
higherBetter_color <- make_color_pal(c("#ff2700", "#f8fcf8", "#44ab43"), bias = 1.3)
lowerBetter_rating_color <- make_color_pal(c("#ff2700", "#f8fcf8", "#44ab43"), bias = 0.6)
#Create table
tbl <- reactable(
simulationData,
pagination = FALSE,
defaultSorted = "meanShots",
defaultSortOrder = "asc",
defaultColGroup = colGroup(headerClass = "group-header"),
columnGroups = list(
colGroup(name = "Shot Number Summary", columns = nShots_cols),
colGroup(name = "Mean Score with Different Super Shot Proportions", columns = mScore_cols),
colGroup(name = "SD of Score with Different Super Shot Proportions", columns = sdScore_cols),
colGroup(name = "Upper Bound of Score with Different Super Shot Proportions", columns = ubScore_cols),
colGroup(name = "Lower Bound of Score with Different Super Shot Proportions", columns = lbScore_cols)
),
defaultColDef = colDef(class = "cell", headerClass = "header"),
columns = list(
squadName = colDef(
defaultSortOrder = "asc",
minWidth = 150,
headerStyle = list(fontWeight = 700),
cell = function(value, index) {
div(
class = "squadName",
img(class = "logo", alt = paste(value, "logo"), src = sprintf("Images/%s.png", value)),
div(class = "squad-name", value)
)
}
),
#Set data for the number of shots columns
meanShots = nShots_column(
name = "Mean No. of Shots",
defaultSortOrder = "asc",
cell = function(value) {
scaled <- (value - minScoreVal) / (maxScoreVal - minScoreVal)
color <- higherBetter_color(scaled)
value <- format(round(value, 1), nsmall = 1)
div(class = "nShot-val", style = list(background = color), value)
}
),
lbShots = nShots_column(
name = "Lower Bound for No. of Shots",
cell = function(value) {
scaled <- (value - minScoreVal) / (maxScoreVal - minScoreVal)
color <- higherBetter_color(scaled)
value <- format(round(value, 1), nsmall = 1)
div(class = "nShot-val", style = list(background = color), value)
}
),
ubShots = nShots_column(
name = "Upper Bound for No. of Shots",
cell = function(value) {
scaled <- (value - minScoreVal) / (maxScoreVal - minScoreVal)
color <- higherBetter_color(scaled)
value <- format(round(value, 1), nsmall = 1)
div(class = "nShot-val", style = list(background = color), value)
}
),
meanScore_0_20 = scoreHigher_column(name = "0%-20% Super Shots", class = "border-left"),
meanScore_20_40 = scoreHigher_column(name = "20%-40% Super Shots"),
meanScore_40_60 = scoreHigher_column(name = "40%-60% Super Shots"),
meanScore_60_80 = scoreHigher_column(name = "60%-80% Super Shots"),
meanScore_80_100 = scoreHigher_column(name = "80%-100% Super Shots"),
sdScore_0_20 = scoreLower_column(name = "0%-20% Super Shots", class = "border-left"),
sdScore_20_40 = scoreLower_column(name = "20%-40% Super Shots"),
sdScore_40_60 = scoreLower_column(name = "40%-60% Super Shots"),
sdScore_60_80 = scoreLower_column(name = "60%-80% Super Shots"),
sdScore_80_100 = scoreLower_column(name = "80%-100% Super Shots"),
ubScore_0_20 = scoreHigher_column(name = "0%-20% Super Shots", class = "border-left"),
ubScore_20_40 = scoreHigher_column(name = "20%-40% Super Shots"),
ubScore_40_60 = scoreHigher_column(name = "40%-60% Super Shots"),
ubScore_60_80 = scoreHigher_column(name = "60%-80% Super Shots"),
ubScore_80_100 = scoreHigher_column(name = "80%-100% Super Shots"),
lbScore_0_20 = scoreHigher_column(name = "0%-20% Super Shots", class = "border-left"),
lbScore_20_40 = scoreHigher_column(name = "20%-40% Super Shots"),
lbScore_40_60 = scoreHigher_column(name = "40%-60% Super Shots"),
lbScore_60_80 = scoreHigher_column(name = "60%-80% Super Shots"),
lbScore_80_100 = scoreHigher_column(name = "80%-100% Super Shots")
),
# Emphasize borders between groups when sorting by group
rowClass = JS("
function(rowInfo, state) {
const firstSorted = state.sorted[0]
if (firstSorted && firstSorted.id === 'group') {
const nextRow = state.pageRows[rowInfo.viewIndex + 1]
if (nextRow && rowInfo.row.group !== nextRow.group) {
return 'group-last'
}
}
}"
),
showSortIcon = FALSE,
borderless = TRUE,
class = "score-table"
)
View(higherBetter_color)
(6.5 - minScoreVal) / (maxScoreVal - minScoreVal)
scaled = (6.5 - minScoreVal) / (maxScoreVal - minScoreVal)
color <- higherBetter_color(scaled)
scaled = (0 - minScoreVal) / (maxScoreVal - minScoreVal)
color <- higherBetter_color(scaled)
#Create table
tbl <- reactable(
simulationData,
pagination = FALSE,
defaultSorted = "meanShots",
defaultSortOrder = "asc",
defaultColGroup = colGroup(headerClass = "group-header"),
columnGroups = list(
colGroup(name = "Shot Number Summary", columns = nShots_cols),
colGroup(name = "Mean Score with Different Super Shot Proportions", columns = mScore_cols),
colGroup(name = "SD of Score with Different Super Shot Proportions", columns = sdScore_cols),
colGroup(name = "Upper Bound of Score with Different Super Shot Proportions", columns = ubScore_cols),
colGroup(name = "Lower Bound of Score with Different Super Shot Proportions", columns = lbScore_cols)
),
defaultColDef = colDef(class = "cell", headerClass = "header"),
columns = list(
squadName = colDef(
defaultSortOrder = "asc",
minWidth = 150,
headerStyle = list(fontWeight = 700),
cell = function(value, index) {
div(
class = "squadName",
img(class = "logo", alt = paste(value, "logo"), src = sprintf("Images/%s.png", value)),
div(class = "squad-name", value)
)
}
),
#Set data for the number of shots columns
meanShots = nShots_column(
name = "Mean No. of Shots",
defaultSortOrder = "asc",
cell = function(value) {
scaled <- (value - minScoreVal) / (maxScoreVal - minScoreVal)
color <- higherBetter_color(scaled)
value <- format(round(value, 1), nsmall = 1)
div(class = "nShot-val", style = list(background = color), value)
}
),
lbShots = nShots_column(
name = "Lower Bound for No. of Shots",
cell = function(value) {
scaled <- (value - minScoreVal) / (maxScoreVal - minScoreVal)
color <- higherBetter_color(scaled)
value <- format(round(value, 1), nsmall = 1)
div(class = "nShot-val", style = list(background = color), value)
}
),
ubShots = nShots_column(
name = "Upper Bound for No. of Shots",
cell = function(value) {
scaled <- (value - minScoreVal) / (maxScoreVal - minScoreVal)
color <- higherBetter_color(scaled)
value <- format(round(value, 1), nsmall = 1)
div(class = "nShot-val", style = list(background = color), value)
}
),
meanScore_0_20 = scoreHigher_column(name = "0%-20% Super Shots", class = "border-left"),
meanScore_20_40 = scoreHigher_column(name = "20%-40% Super Shots"),
meanScore_40_60 = scoreHigher_column(name = "40%-60% Super Shots"),
meanScore_60_80 = scoreHigher_column(name = "60%-80% Super Shots"),
meanScore_80_100 = scoreHigher_column(name = "80%-100% Super Shots"),
sdScore_0_20 = scoreLower_column(name = "0%-20% Super Shots", class = "border-left"),
sdScore_20_40 = scoreLower_column(name = "20%-40% Super Shots"),
sdScore_40_60 = scoreLower_column(name = "40%-60% Super Shots"),
sdScore_60_80 = scoreLower_column(name = "60%-80% Super Shots"),
sdScore_80_100 = scoreLower_column(name = "80%-100% Super Shots"),
ubScore_0_20 = scoreHigher_column(name = "0%-20% Super Shots", class = "border-left"),
ubScore_20_40 = scoreHigher_column(name = "20%-40% Super Shots"),
ubScore_40_60 = scoreHigher_column(name = "40%-60% Super Shots"),
ubScore_60_80 = scoreHigher_column(name = "60%-80% Super Shots"),
ubScore_80_100 = scoreHigher_column(name = "80%-100% Super Shots"),
lbScore_0_20 = scoreHigher_column(name = "0%-20% Super Shots", class = "border-left"),
lbScore_20_40 = scoreHigher_column(name = "20%-40% Super Shots"),
lbScore_40_60 = scoreHigher_column(name = "40%-60% Super Shots"),
lbScore_60_80 = scoreHigher_column(name = "60%-80% Super Shots"),
lbScore_80_100 = scoreHigher_column(name = "80%-100% Super Shots")
),
# Emphasize borders between groups when sorting by group
rowClass = JS("
function(rowInfo, state) {
const firstSorted = state.sorted[0]
if (firstSorted && firstSorted.id === 'group') {
const nextRow = state.pageRows[rowInfo.viewIndex + 1]
if (nextRow && rowInfo.row.group !== nextRow.group) {
return 'group-last'
}
}
}"
),
showSortIcon = FALSE,
borderless = TRUE,
class = "score-table"
)
View(scoreLower_column)
meanScore_20_40 = scoreHigher_column(name = "20%-40% Super Shots")
View(meanScore_20_40)
#Setup functions for score columns
scoreHigher_column <- function(maxWidth = 70, class = NULL, ...) {
colDef(
cell = function(value) {
scaled <- (value - minScoreVal) / (maxScoreVal - minScoreVal)
color <- higherBetter_color(scaled)
value <- format(round(value, 1), nsmall = 1)
div(class = "nShot-val", style = list(background = color), value)
},
maxWidth = maxWidth,
class = paste("cell number", class),
...
)
}
#Setup functions for score columns
scoreHigher_column <- function(maxWidth = 70, class = NULL, ...) {
colDef(
cell = function(value) {
scaled <- (value - minScoreVal) / (maxScoreVal - minScoreVal)
color <- higherBetter_color(scaled)
value <- format(round(value, 1), nsmall = 1)
div(class = "nShot-val", style = list(background = color), value)
},
maxWidth = maxWidth,
...
)
}
scoreLower_column <- function(maxWidth = 70, class = NULL, ...) {
colDef(
cell = function(value) {
scaled <- (value - minScoreVal) / (maxScoreVal - minScoreVal)
color <- higherBetter_color(scaled)
value <- format(round(value, 1), nsmall = 1)
div(class = "nShot-val", style = list(background = color), value)
},
maxWidth = maxWidth,
...
)
}
#Set function to create scaled colour palette
make_color_pal <- function(colors, bias = 1) {
get_color <- colorRamp(colors, bias = bias)
function(x) rgb(get_color(x), maxColorValue = 255)
}
#Set colour palette from green-red or red-green
higherBetter_color <- make_color_pal(c("#ff2700", "#f8fcf8", "#44ab43"), bias = 1.3)
lowerBetter_rating_color <- make_color_pal(c("#ff2700", "#f8fcf8", "#44ab43"), bias = 0.6)
#Create table
tbl <- reactable(
simulationData,
pagination = FALSE,
defaultSorted = "meanShots",
defaultSortOrder = "asc",
defaultColGroup = colGroup(headerClass = "group-header"),
columnGroups = list(
colGroup(name = "Shot Number Summary", columns = nShots_cols),
colGroup(name = "Mean Score with Different Super Shot Proportions", columns = mScore_cols),
colGroup(name = "SD of Score with Different Super Shot Proportions", columns = sdScore_cols),
colGroup(name = "Upper Bound of Score with Different Super Shot Proportions", columns = ubScore_cols),
colGroup(name = "Lower Bound of Score with Different Super Shot Proportions", columns = lbScore_cols)
),
defaultColDef = colDef(class = "cell", headerClass = "header"),
columns = list(
squadName = colDef(
defaultSortOrder = "asc",
minWidth = 150,
headerStyle = list(fontWeight = 700),
cell = function(value, index) {
div(
class = "squadName",
img(class = "logo", alt = paste(value, "logo"), src = sprintf("Images/%s.png", value)),
div(class = "squad-name", value)
)
}
),
#Set data for the number of shots columns
meanShots = nShots_column(
name = "Mean No. of Shots",
defaultSortOrder = "asc",
cell = function(value) {
scaled <- (value - minScoreVal) / (maxScoreVal - minScoreVal)
color <- higherBetter_color(scaled)
value <- format(round(value, 1), nsmall = 1)
div(class = "nShot-val", style = list(background = color), value)
}
),
lbShots = nShots_column(
name = "Lower Bound for No. of Shots",
cell = function(value) {
scaled <- (value - minScoreVal) / (maxScoreVal - minScoreVal)
color <- higherBetter_color(scaled)
value <- format(round(value, 1), nsmall = 1)
div(class = "nShot-val", style = list(background = color), value)
}
),
ubShots = nShots_column(
name = "Upper Bound for No. of Shots",
cell = function(value) {
scaled <- (value - minScoreVal) / (maxScoreVal - minScoreVal)
color <- higherBetter_color(scaled)
value <- format(round(value, 1), nsmall = 1)
div(class = "nShot-val", style = list(background = color), value)
}
),
meanScore_0_20 = scoreHigher_column(name = "0%-20% Super Shots", class = "border-left"),
meanScore_20_40 = scoreHigher_column(name = "20%-40% Super Shots"),
meanScore_40_60 = scoreHigher_column(name = "40%-60% Super Shots"),
meanScore_60_80 = scoreHigher_column(name = "60%-80% Super Shots"),
meanScore_80_100 = scoreHigher_column(name = "80%-100% Super Shots"),
sdScore_0_20 = scoreLower_column(name = "0%-20% Super Shots", class = "border-left"),
sdScore_20_40 = scoreLower_column(name = "20%-40% Super Shots"),
sdScore_40_60 = scoreLower_column(name = "40%-60% Super Shots"),
sdScore_60_80 = scoreLower_column(name = "60%-80% Super Shots"),
sdScore_80_100 = scoreLower_column(name = "80%-100% Super Shots"),
ubScore_0_20 = scoreHigher_column(name = "0%-20% Super Shots", class = "border-left"),
ubScore_20_40 = scoreHigher_column(name = "20%-40% Super Shots"),
ubScore_40_60 = scoreHigher_column(name = "40%-60% Super Shots"),
ubScore_60_80 = scoreHigher_column(name = "60%-80% Super Shots"),
ubScore_80_100 = scoreHigher_column(name = "80%-100% Super Shots"),
lbScore_0_20 = scoreHigher_column(name = "0%-20% Super Shots", class = "border-left"),
lbScore_20_40 = scoreHigher_column(name = "20%-40% Super Shots"),
lbScore_40_60 = scoreHigher_column(name = "40%-60% Super Shots"),
lbScore_60_80 = scoreHigher_column(name = "60%-80% Super Shots"),
lbScore_80_100 = scoreHigher_column(name = "80%-100% Super Shots")
),
# Emphasize borders between groups when sorting by group
rowClass = JS("
function(rowInfo, state) {
const firstSorted = state.sorted[0]
if (firstSorted && firstSorted.id === 'group') {
const nextRow = state.pageRows[rowInfo.viewIndex + 1]
if (nextRow && rowInfo.row.group !== nextRow.group) {
return 'group-last'
}
}
}"
),
showSortIcon = FALSE,
borderless = TRUE,
class = "score-table"
)
div(class = "scores",
div(class = "title",
h2("Score Predictions with Different Super Shot Proportions"),
"Mean, standard deviation (SD), and upper & lower bounds for scores from 5 minute quarter simulations across different Super Netball teams."
),
tbl,
"Simulations based on shooting data from Super Shot periods across 4 rounds of SSN 2020."
)
apply(simulationData$ubShots,2,max)
max(simulationData$ubShots)
maxShotVal = min(simulationData$lbShots)
maxShotVal = max(simulationData$ubShots)
minShotVal = min(simulationData$lbShots)
#Load .csv file of super shot proportion simulations
simulationData <- read.csv("superSimSummary_afterRound4.csv", stringsAsFactors = FALSE)
#Set-up columns for table
nShots_cols <- c("meanShots", "lbShots", "ubShots")
mScore_cols <- c("meanScore_0_20", "meanScore_20_40", "meanScore_40_60", "meanScore_60_80", "meanScore_80_100")
sdScore_cols <- c("sdScore_0_20", "sdScore_20_40", "sdScore_40_60", "sdScore_60_80", "sdScore_80_100")
ubScore_cols <- c("ubScore_0_20", "ubScore_20_40", "ubScore_40_60", "ubScore_60_80", "ubScore_80_100")
lbScore_cols <- c("lbScore_0_20", "lbScore_20_40", "lbScore_40_60", "lbScore_60_80", "lbScore_80_100")
simulationData <- simulationData[, c("squadName", nShots_cols, mScore_cols, sdScore_cols, ubScore_cols, lbScore_cols)]
#Setup function for shots column
nShots_column <- function(maxWidth = 150, ...) {
colDef(maxWidth = maxWidth, align = "center", class = "cell number", ...)
}
#Identify max and min score for scaling score colours
maxCheckList = c("ubScore_0_20", "ubScore_20_40", "ubScore_40_60", "ubScore_60_80", "ubScore_80_100")
maxScoreVal = max(apply(simulationData[,maxCheckList],2,max))
minCheckList = c("lbScore_0_20", "lbScore_20_40", "lbScore_40_60", "lbScore_60_80", "lbScore_80_100")
minScoreVal = min(apply(simulationData[,minCheckList],2,min))
#Identify max and min shots for scaling score colours
maxShotVal = max(simulationData$ubShots)
minShotVal = min(simulationData$lbShots)
#Identify max and min score for deviation score colours
sdCheckList = c("sdScore_0_20", "sdScore_20_40", "sdScore_40_60", "sdScore_60_80", "sdScore_80_100")
maxSdVal = max(apply(simulationData[,sdCheckList],2,max))
minSdVal = min(apply(simulationData[,sdCheckList],2,min))
#Setup functions for score columns
scoreHigher_column <- function(maxWidth = 100, class = NULL, ...) {
colDef(
cell = formatScore,
maxWidth = maxWidth,
class = paste("cell number", class),
style = function(value) {
scaled = (value - minScoreVal) / (maxScoreVal - minScoreVal)
list(color = "#111", background = higherBetter_color(value))
},
...
)
}
sd_column <- function(maxWidth = 100, class = NULL, ...) {
colDef(
cell = formatScore,
maxWidth = maxWidth,
class = paste("cell number", class),
style = function(value) {
scaled = (value - minSdVal) / (maxSdVal - minSdVal)
list(color = "#111", background = lowerBetter_color(scaled))
},
...
)
}
#Set formatter for score values
formatScore <- function(value) {
formatC(paste0(round(value, 1)), width = 4)
}
.libPaths()
knitr::opts_chunk$set(echo = TRUE)
.libPaths("C:/Users/aafox/AppData/Local/Continuum/anaconda3/envs/super_netball_analysis_r/Lib/R/library")
knitr::opts_chunk$set(echo = TRUE)
#Load libraries
library(reactable)
library(htmltools)
c("#00876c", "#4c9d85", "#79b2a0", "#a2c8bb", "#cbded7", "#f3f3f3", "#f3d1d1", "#f0afaf", "#e98c8e", "#e0676f", "#d43d51")
rev(c("#00876c", "#4c9d85", "#79b2a0", "#a2c8bb", "#cbded7", "#f3f3f3", "#f3d1d1", "#f0afaf", "#e98c8e", "#e0676f", "#d43d51"))
View(simulationData)
#Set the libPath to the conda environment
.libPaths("C:/Users/aafox/AppData/Local/Continuum/anaconda3/envs/super_netball_analysis_r/Lib/R/library")
knitr::opts_chunk$set(echo = FALSE)
scoreHigher_column <- function(maxWidth = 75, class = NULL, ...) {
colDef(
cell = formatScore,
maxWidth = maxWidth,
class = paste("cell number", class)
# style = function(value) {
#   scaled = (value - minScoreVal) / (maxScoreVal - minScoreVal)
#   list(color = "#111", background = higherBetter_color(scaled))
# },
# ...
)
}
scaled = (4.3 - minScoreVal) / (maxScoreVal - minScoreVal)
scaled
higherBetter_color(scaled)
max(apply(simulationData[,maxCheckList],2,max))
max(apply(simulationData[0,maxCheckList],2,max))
max(apply(simulationData[1,maxCheckList],2,max))
maxCheckList = c("meanScore_0_20", "meanScore_20_40", "meanScore_40_60", "meanScore_60_80", "meanScore_80_100")
maxScoreVal = max(apply(simulationData[1,maxCheckList],2,max))
maxScoreVal
scoreHigher_column <- function(maxWidth = 75, class = NULL, ...) {
colDef(
cell = formatScore,
maxWidth = maxWidth,
class = paste("cell number", class),
style = function(value,index) {
maxScoreVal = max(apply(simulationData[index,maxCheckList],2,max))
minScoreVal = min(apply(simulationData[index,minCheckList],2,min))
scaled = (value - minScoreVal) / (maxScoreVal - minScoreVal)
list(color = "#111", higherBetter_color(scaled))
},
...
)
}
min(simulationData$meanScore_0_20)
min(simulationData$meanScore_0_20[1])
min(simulationData$meanScore_0_20[1],simulationData$meanScore_20_40[1])
index=1
minVal = min(simulationData$meanScore_0_20[index],
simulationData$meanScore_20_40[index],
simulationData$meanScore_40_60[index],
simulationData$meanScore_60_80[index],
simulationData$meanScore_80_100[index])
maxVal = max(simulationData$meanScore_0_20[index],
simulationData$meanScore_20_40[index],
simulationData$meanScore_40_60[index],
simulationData$meanScore_60_80[index],
simulationData$meanScore_80_100[index])
minVal
maxVal
formatScore <- function(value) {
formatC(paste0(round(value, 1)), width = 4)
}
formatScore(5.5555)
paste("cell number", class)
class = paste("cell number", class)
class = paste("cell number", NULL)
